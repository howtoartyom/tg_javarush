import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import get_personality_response
from data.personalities import get_personality_keyboard, get_personality_data
import os
from handlers.basic import start

logger = logging.getLogger(__name__)

SELECTING_PERSONALITY, CHATTING_WITH_PERSONALITY = range(2)


async def talk_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /talk"""
    await talk_start(update, context)


async def talk_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        image_path = "data/images/personality.jpeg"
        message_text = (
            "üë• <b>–î–∏–∞–ª–æ–≥ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:\n\n"
            "üß¨ <b>–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω</b> - —Ñ–∏–∑–∏–∫–∞ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è\n"
            "üé≠ <b>–£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä</b> - –ø–æ—ç–∑–∏—è –∏ –¥—Ä–∞–º–∞—Ç—É—Ä–≥–∏—è\n"
            "üé® <b>–õ–µ–æ–Ω–∞—Ä–¥–æ –¥–∞ –í–∏–Ω—á–∏</b> - –∏—Å–∫—É—Å—Å—Ç–≤–æ –∏ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏—è\n"
            "üì± <b>–°—Ç–∏–≤ –î–∂–æ–±—Å</b> - —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏\n"
            "üìù <b>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω</b> - —Ä—É—Å—Å–∫–∞—è –ø–æ—ç–∑–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å:"
        )

        keyboard = get_personality_keyboard()

        # –ï—Å–ª–∏ –µ—Å—Ç—å callback query, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –º–µ–Ω—é
        if update.callback_query:
            if os.path.exists(image_path):
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                await update.callback_query.message.delete()
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=update.callback_query.message.chat_id,
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.callback_query.edit_message_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
            await update.callback_query.answer()
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–º–∞–Ω–¥–∞ /talk)
            if os.path.exists(image_path):
                with open(image_path, 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=message_text,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    message_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )

        return SELECTING_PERSONALITY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—è–º–∏: {e}")
        error_text = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if update.callback_query:
            await update.callback_query.edit_message_text(error_text)
        else:
            await update.message.reply_text(error_text)

        return -1

async def personality_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ callback_data
        personality_key = query.data.replace("personality_", "")
        personality = get_personality_data(personality_key)

        if not personality:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
            if query.message.photo:
                await query.edit_message_caption("‚ùå –û—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return -1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_personality'] = personality_key
        context.user_data['personality_data'] = personality

        message_text = (
            f"{personality['emoji']} <b>–î–∏–∞–ª–æ–≥ —Å {personality['name']}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å {personality['name']}!\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ª–∏—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ.\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å:"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
        if query.message.photo:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
            await query.edit_message_caption(
                caption=message_text,
                parse_mode='HTML'
            )
        else:
            # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text(
                text=message_text,
                parse_mode='HTML'
            )

        return CHATTING_WITH_PERSONALITY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            if query.message.photo:
                await query.edit_message_caption("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await query.edit_message_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception:
            # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        return -1


async def handle_personality_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏"""
    try:
        user_message = update.message.text
        personality_key = context.user_data.get('current_personality')
        personality_data = context.user_data.get('personality_data')

        if not personality_key or not personality_data:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /talk –¥–ª—è –Ω–∞—á–∞–ª–∞."
            )
            return -1

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_msg = await update.message.reply_text(
            f"{personality_data['emoji']} {personality_data['name']} —Ä–∞–∑–º—ã—à–ª—è–µ—Ç... ‚è≥"
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT –≤ —Ä–æ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_response = await get_personality_response(user_message, personality_data['prompt'])

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="continue_chat")],
            [InlineKeyboardButton("üë• –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—á–Ω–æ—Å—Ç—å", callback_data="change_personality")],
            [InlineKeyboardButton("üè† –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="finish_talk")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await processing_msg.delete()
        await update.message.reply_text(
            f"{personality_data['emoji']} <b>{personality_data['name']} –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n{personality_response}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        return CHATTING_WITH_PERSONALITY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return CHATTING_WITH_PERSONALITY


async def handle_personality_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é"""
    query = update.callback_query
    await query.answer()

    if query.data == "continue_chat":
        personality_data = context.user_data.get('personality_data')
        if personality_data:
            await query.edit_message_text(
                f"{personality_data['emoji']} <b>–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å {personality_data['name']}</b>\n\n"
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                parse_mode='HTML'
            )
            return CHATTING_WITH_PERSONALITY

    elif query.data == "change_personality":
        return await talk_start(update, context)

    elif query.data == "finish_talk":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—á–Ω–æ—Å—Ç–∏
        context.user_data.pop('current_personality', None)
        context.user_data.pop('personality_data', None)

        return -1

    return CHATTING_WITH_PERSONALITY
